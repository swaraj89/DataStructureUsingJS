{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2017-08-10T11:41:35.587Z",
    "end": "2017-08-10T11:41:35.614Z",
    "duration": 27,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Stack",
        "suites": [],
        "tests": [
          {
            "title": "should be able to create a stack object.",
            "fullTitle": "Stack should be able to create a stack object.",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "efb9b193-1af2-4797-b737-5d0da8346e12",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have 2 properties. top and length",
            "fullTitle": "Stack should have 2 properties. top and length",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
            "err": {},
            "isRoot": false,
            "uuid": "cc6439b6-5c69-4605-9454-556931c48a54",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say if stack is empty",
            "fullTitle": "Stack should say if stack is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
            "err": {},
            "isRoot": false,
            "uuid": "89fbf3d5-fa0f-4de3-bd83-42d11bd054fc",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to push",
            "fullTitle": "Stack should be able to push",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
            "err": {},
            "isRoot": false,
            "uuid": "3aacf5cb-e0af-4a9c-9f91-cbdb83e3ef6f",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek",
            "fullTitle": "Stack should be able to peek",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
            "err": {},
            "isRoot": false,
            "uuid": "28e9f62d-9095-4102-ad8d-f309831f76bc",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say determine if it is empty",
            "fullTitle": "Stack should say determine if it is empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "51b88b91-df0d-4f78-bafb-0c1a6f863937",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to pop",
            "fullTitle": "Stack should be able to pop",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "a94c9334-f19e-47a4-ac9a-19cc89c7d21b",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to clear all elements",
            "fullTitle": "Stack should be able to clear all elements",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
            "err": {},
            "isRoot": false,
            "uuid": "4294c5b4-252e-4125-877e-66c79f4e7329",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to convert the instance as an array",
            "fullTitle": "Stack should be able to convert the instance as an array",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
            "err": {},
            "isRoot": false,
            "uuid": "692f5742-50c9-4bd0-88ad-1ab7ca6067f0",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          }
        ],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "\\test\\index.test.js",
        "uuid": "256ce69d-2b01-4973-8da6-c1a48c9db334",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Stack \"before all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "stack = new _index2.default();",
            "err": {},
            "isRoot": false,
            "uuid": "6327cc60-f099-4437-af7e-570a0b20e93a",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "C:\\Users\\s.panigrahi\\Documents\\Projects\\DataStructureUsingJS\\test\\index.test.js",
        "passes": [
          {
            "title": "should be able to create a stack object.",
            "fullTitle": "Stack should be able to create a stack object.",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
            "err": {},
            "isRoot": false,
            "uuid": "efb9b193-1af2-4797-b737-5d0da8346e12",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should have 2 properties. top and length",
            "fullTitle": "Stack should have 2 properties. top and length",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
            "err": {},
            "isRoot": false,
            "uuid": "cc6439b6-5c69-4605-9454-556931c48a54",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say if stack is empty",
            "fullTitle": "Stack should say if stack is empty",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
            "err": {},
            "isRoot": false,
            "uuid": "89fbf3d5-fa0f-4de3-bd83-42d11bd054fc",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to push",
            "fullTitle": "Stack should be able to push",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
            "err": {},
            "isRoot": false,
            "uuid": "3aacf5cb-e0af-4a9c-9f91-cbdb83e3ef6f",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to peek",
            "fullTitle": "Stack should be able to peek",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
            "err": {},
            "isRoot": false,
            "uuid": "28e9f62d-9095-4102-ad8d-f309831f76bc",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should say determine if it is empty",
            "fullTitle": "Stack should say determine if it is empty",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "51b88b91-df0d-4f78-bafb-0c1a6f863937",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to pop",
            "fullTitle": "Stack should be able to pop",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
            "err": {},
            "isRoot": false,
            "uuid": "a94c9334-f19e-47a4-ac9a-19cc89c7d21b",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to clear all elements",
            "fullTitle": "Stack should be able to clear all elements",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
            "err": {},
            "isRoot": false,
            "uuid": "4294c5b4-252e-4125-877e-66c79f4e7329",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should be able to convert the instance as an array",
            "fullTitle": "Stack should be able to convert the instance as an array",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
            "err": {},
            "isRoot": false,
            "uuid": "692f5742-50c9-4bd0-88ad-1ab7ca6067f0",
            "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
            "isHook": false,
            "skipped": false
          }
        ],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": true,
        "hasSuites": false,
        "totalTests": 9,
        "totalPasses": 9,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": true,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 6,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "644de64c-600c-41fb-84df-feef8d1d7f1c",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "should be able to create a stack object.",
      "fullTitle": "Stack should be able to create a stack object.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "efb9b193-1af2-4797-b737-5d0da8346e12",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have 2 properties. top and length",
      "fullTitle": "Stack should have 2 properties. top and length",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
      "err": {},
      "isRoot": false,
      "uuid": "cc6439b6-5c69-4605-9454-556931c48a54",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say if stack is empty",
      "fullTitle": "Stack should say if stack is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
      "err": {},
      "isRoot": false,
      "uuid": "89fbf3d5-fa0f-4de3-bd83-42d11bd054fc",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to push",
      "fullTitle": "Stack should be able to push",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
      "err": {},
      "isRoot": false,
      "uuid": "3aacf5cb-e0af-4a9c-9f91-cbdb83e3ef6f",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek",
      "fullTitle": "Stack should be able to peek",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
      "err": {},
      "isRoot": false,
      "uuid": "28e9f62d-9095-4102-ad8d-f309831f76bc",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say determine if it is empty",
      "fullTitle": "Stack should say determine if it is empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "51b88b91-df0d-4f78-bafb-0c1a6f863937",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to pop",
      "fullTitle": "Stack should be able to pop",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "a94c9334-f19e-47a4-ac9a-19cc89c7d21b",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to clear all elements",
      "fullTitle": "Stack should be able to clear all elements",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
      "err": {},
      "isRoot": false,
      "uuid": "4294c5b4-252e-4125-877e-66c79f4e7329",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to convert the instance as an array",
      "fullTitle": "Stack should be able to convert the instance as an array",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
      "err": {},
      "isRoot": false,
      "uuid": "692f5742-50c9-4bd0-88ad-1ab7ca6067f0",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "should be able to create a stack object.",
      "fullTitle": "Stack should be able to create a stack object.",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.instanceOf(stack, _index2.default, \"stack has been instantiated.\");",
      "err": {},
      "isRoot": false,
      "uuid": "efb9b193-1af2-4797-b737-5d0da8346e12",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should have 2 properties. top and length",
      "fullTitle": "Stack should have 2 properties. top and length",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.property(stack, 'top');\nassert.property(stack, 'length');",
      "err": {},
      "isRoot": false,
      "uuid": "cc6439b6-5c69-4605-9454-556931c48a54",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say if stack is empty",
      "fullTitle": "Stack should say if stack is empty",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isTrue(stack.isEmpty(), \"stack has no data\");",
      "err": {},
      "isRoot": false,
      "uuid": "89fbf3d5-fa0f-4de3-bd83-42d11bd054fc",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to push",
      "fullTitle": "Stack should be able to push",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.push(1);\nassert.equal(stack.top.data, 1, \"1 should be at top\");\nassert.equal(stack.top.next, null, \"1 should be at top\");\nassert.equal(stack.length, 1, \"length should be 1\");\nstack.push(2);\nassert.equal(stack.top.data, 2, \"2 should be at top\");\nassert.equal(stack.top.next.data, 1, \"2 should be at top\");\nassert.equal(stack.length, 2, \"length should be 2\");",
      "err": {},
      "isRoot": false,
      "uuid": "3aacf5cb-e0af-4a9c-9f91-cbdb83e3ef6f",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to peek",
      "fullTitle": "Stack should be able to peek",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.equal(stack.peek(), 2, \"2 should be at top.\");",
      "err": {},
      "isRoot": false,
      "uuid": "28e9f62d-9095-4102-ad8d-f309831f76bc",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should say determine if it is empty",
      "fullTitle": "Stack should say determine if it is empty",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "assert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "51b88b91-df0d-4f78-bafb-0c1a6f863937",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to pop",
      "fullTitle": "Stack should be able to pop",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "var popped = stack.pop();\nassert.equal(popped.data, 2, \"the top most element has not been removed\");\nassert.equal(stack.size, 1, \"length of stack has not reduced\");\nassert.isFalse(stack.isEmpty(), \"stack has some data\");",
      "err": {},
      "isRoot": false,
      "uuid": "a94c9334-f19e-47a4-ac9a-19cc89c7d21b",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to clear all elements",
      "fullTitle": "Stack should be able to clear all elements",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "stack.clear();\nassert.isTrue(stack.isEmpty(), \"stack should have no elements\");",
      "err": {},
      "isRoot": false,
      "uuid": "4294c5b4-252e-4125-877e-66c79f4e7329",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "should be able to convert the instance as an array",
      "fullTitle": "Stack should be able to convert the instance as an array",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "for (var index = 0; index < 5; index++) {\n    stack.push(index);\n};\nvar stringified = stack.toString();\nassert.equal(stack.length, 5, \"5 elements should be available\");\nassert.equal(stack.peek(), 4, \"top most elements must be last element added\");\nassert.isArray(stringified, \"stack should be available as a array\");\nassert.deepEqual(stringified, [4, 3, 2, 1, 0], \"stack should be displayed as array.\");",
      "err": {},
      "isRoot": false,
      "uuid": "692f5742-50c9-4bd0-88ad-1ab7ca6067f0",
      "parentUUID": "256ce69d-2b01-4973-8da6-c1a48c9db334",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}